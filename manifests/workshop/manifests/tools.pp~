###################################################
### https://github.com/jfqd/puppet-module-build ###
###################################################
# Debian/nexenta specific build module
# 
# Usage:
#
# build::install { 'top':
#   download => 'http://www.unixtop.org/dist/top-3.7.tar.gz',
#   creates  => '/usr/local/bin/top',
# }
define get::build::install ($download, $creates, $buildoptions="", $extractorcmd="", $rm_build_folder=true) {
  
  build::requires { "${name}-requires-build-essential":  package => 'build-essential' }
  
  $cwd    = "/usr/local/src"
  
  $unzip  = "unzip"
  $tar    = "tar"
  $bunzip = "bunzip2"
  $gunzip = "gunzip"

  # Set default parameters for the exec type
  Exec {
    path    => [ "/bin/", "/sbin/" , "/usr/bin/", "/usr/sbin/" ],
    creates => $creates,
    cwd     => "$cwd"
  }
  
  $filename = basename($download)
  
  $extractor = $filename ? {
    /\.zip$/      => "$unzip -oqd $cwd/$name $cwd/$filename",
    /\.tar\.bz2$/ => "$bunzip -c $cwd/$filename | $tar --overwrite --directory $cwd/$name -xf -",
    /\.t(ar.)?gz/ => "$gunzip < $cwd/$filename | $tar --overwrite --directory $cwd/$name -xf -",
    default       => $extractorcmd,
  }

  #$extension = $pkg_format ? {
  #  zip     => ".zip",
  #  bzip    => ".tar.bz2",
  #  tar     => ".tar.gz",
  #  default => $pkg_extension,
  #}
  
  #$foldername = $pkg_folder ? {
  #  ''      => gsub($filename, ".(zip|tar.bz2|tar.gz|tgz)", ""),
  #  default => $pkg_folder,
  #}
  
  #$extractor = $pkg_format ? {
  #  zip     => "$unzip -q -d $cwd $cwd/$filename",
  #  bzip    => "$bunzip -c $cwd/$filename | $tar -xf -",
  #  tar     => "$gunzip < $cwd/$filename | $tar -xf -",
  #  default => $extractorcmd,
  #}
  
  exec { "download-${name}":
    command => "/usr/bin/wget -q $download",
    timeout => 120, # 2 minutes
    creates => "${cwd}/${filename}",
  }
  
  exec { "extract-${name}":
    command => "$extractor",
    timeout => 120, # 2 minutes
    require => Exec["download-${name}"],
  }
  
  exec { "config-${name}":
    cwd     => "${cwd}/${name}/*",
    command => "$cwd/$name/*/configure $buildoptions",
    timeout => 120, # 2 minutes
    require => Exec["extract-${name}"],
  }
  
  exec { "make-install-${name}":
    cwd     => "$cwd/$name",
    command => "/usr/bin/make && /usr/bin/make install",
    timeout => 600, # 10 minutes
    require => Exec["config-${name}"],
  }
  
  # remove build folder
  case $rm_build_folder {
    true: {
      notice("remove build folder")
      exec { "remove-${name}-build-folder":
        command => "rm -rf $cwd/$name",
        require => Exec["make-install-${name}"],
      } # exec
    } # true
  } # case
  
}

define get::install ($download, $creates, $buildoptions="", $extractorcmd="", $rm_build_folder=true) {
  
  $cwd    = "/usr/local/src"
  
  $unzip  = "unzip"
  $tar    = "tar"
  $bunzip = "bunzip2"
  $gunzip = "gunzip"

  # Set default parameters for the exec type
  Exec {
    path    => [ "/bin/", "/sbin/" , "/usr/bin/", "/usr/sbin/" ],
    creates => $creates,
    cwd     => "$cwd"
  }
  
  $filename = basename($download)
  
  $extractor = $filename ? {
    /\.zip$/      => "$unzip -oqd $cwd/$name $cwd/$filename | fgrep creating | awk '{print $2}' | grep -o '^[^/]\+' | uniq",
    /\.tar\.bz2$/ => "$bunzip -c $cwd/$filename | $tar --overwrite --directory $cwd/$name -xf -",
    /\.t(ar.)?gz/ => "$gunzip < $cwd/$filename | $tar --overwrite --directory $cwd/$name -xf -",
    default       => $extractorcmd,
  }

  exec { "download-${name}":
    command => "/usr/bin/wget -q $download",
    timeout => 120, # 2 minutes
    creates => "${cwd}/${filename}",
  }
  
  exec { "extract-${name}":
    command => "$extractor",
    timeout => 120, # 2 minutes
    require => Exec["download-${name}"],
  }
  
  #exec { "install-${name}":
  #  cwd     => "$cwd/$name",
  #  command => "chmod +x && mv fastq /usr/local/bin/",
  #  timeout => 600, # 10 minutes
  #  require => Exec["config-${name}"],
  #}
  
  # remove build folder
  case $rm_build_folder {
    true: {
      notice("remove build folder")
      exec { "remove-${name}-build-folder":
        command => "rm -rf $cwd/$name",
        require => Exec["install-${name}"],
      } # exec
    } # true
  } # case
  
}

define build::requires ( $ensure='installed', $package ) {
  if defined( Package[$package] ) {
    debug("$package already installed")
  } else {
    package { $package: ensure => $ensure }
  }
}

###################################################
